name: "Terraform Apply (local-state debug)"

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: true
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  apply:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra/tf-app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Temporarily disable any azurerm backend blocks so Terraform won't request it
      - name: Disable azurerm backend (CI only)
        run: |
          set -e
          # Find files that declare `backend "azurerm"`
          files=$(grep -RIl 'backend[[:space:]]*\"azurerm\"' . || true)
          if [ -n "$files" ]; then
            echo "Disabling backend in:"
            echo "$files"
            for f in $files; do
              mv "$f" "$f.ci-disabled"
            done
          else
            echo "No azurerm backend block found."
          fi

      - name: Reset Terraform working dir
        run: |
          rm -rf .terraform .terraform.lock.hcl terraform.tfstate terraform.tfstate.backup

      - name: Terraform Init (local state)
        run: terraform init -backend=false -reconfigure -input=false

      - name: Terraform Apply (local state)
        run: terraform apply -auto-approve -input=false
